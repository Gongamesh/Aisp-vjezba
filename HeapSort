#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>


void swap(int*, int*);
void heapify(int*, int, int);
void heap_sort(int*, int);
void boubble_sort(int*, int);


int main(void) {
	int n;
	int array1[10000], array2[10000];
	time_t t1, t2;

	do {
		printf("Input size of array.\n");
		scanf("%d", &n);
		if (n <= 0) {
			printf("Wrong input.\n");
		}
	} while (n <= 0);

	for (int i = 0; i < n; i++) {
		array1[i] = rand();
	}

	for (int i = 0; i < n; i++) {
		printf("%d ", array1[i]);
	}

	for (int i = 0; i < n; i++) {
		array2[i] = array1[i];
	}

	printf("\n");

	for (int i = 0; i < n; i++) {
		printf("%d ", array1[i]);
	}

	printf("\n");

	t1 = clock();
	boubble_sort(array1, n);
	t2 = clock();
	printf("Vrijeme trajanja boubblesorta je %dms\n", t2 - t1);

	for (int i = 0; i < n; i++) {
		printf("%d ", array1[i]);
	}

	printf("\n");

	t1 = clock();
	heap_sort(array2, n);
	t2 = clock();
	printf("Vrijeme trajanja heapsorta je %dms\n", t2 - t1);


	for (int i = 0; i < n; i++) {
		printf("%d ", array2[i]);
	}

	return 0;
}

void swap(int* x, int* y) {
	int temp = *x;
	*x = *y;
	*y = temp;
}

void heapify(int* array, int N, int i)
{
	int largest = i;
	int left = 2 * i;
	int right = 2 * i + 1;

	if (left < N && array[left] > array[largest]) {
		largest = left;
	}
	if (right < N && array[right] > array[largest]) {
		largest = right;
	}
	if (largest != i) {

		swap(&array[i], &array[largest]);

		heapify(array, N, largest);
	}
}

void heap_sort(int* array, int N)
{


	for (int i = N / 2 - 1; i >= 0; i--)

		heapify(array, N, i);


	for (int i = N - 1; i >= 0; i--) {

		swap(&array[0], &array[i]);


		heapify(array, i, 0);
	}
}

void boubble_sort(int* array, int n) {

	for (int i = 0; i < n - 1; i++) {
		for (int j = 0; j < n - i - 1; j++) {
			if (array[j] > array[j + 1]) {
				swap(&array[j], &array[j + 1]);
			}
		}
	}

}
